---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/15 1:49
---
require("skynet.manager")
local logger       = require "logger"
local protoUtil = require("protoUtil")
local errorcode = require("errorCode")
local protoMap = require("protoMap")
local nodeMgr = require("nodeMgr")
local this = {}

---接受到从别个服务器转发的客户端消息 也有可能是自己服务器的
function this.redirect(gSession, buffer)
    local  header, data = protoUtil.decodeRequest(buffer)
    if not header then
        header.errorcode = errorcode.SystemError.packHeaderNil
        nodeMgr.sendMsgToClient(gSession, header)
        logger.Errorf("dispatch header is nil")
        return
    end
    local ok, msg = xpcall(function()
        local ec, ret = this.DistributionLocalMsg(gSession, header, data)
    end, debug.traceback)
    if not ok then
        header.errorcode = errorcode.SystemError.serviceIsStoped
        nodeMgr.sendMsgToClient(gSession, header)
        error("派发消息失败 消息id="..header.cmd.." err:"..msg)
    end
end

function this.redirectS2S(module,funcName,gSession,...)
    local serviceBase = this.ServiceBase
    local service = serviceBase.modules[module] ---取得协议对应的模块脚本
    if not service or not service[funcName] then
        logger.Errorf("the module[%s] object is not found in this service", module)
        --nodeMgr.sendMsgToClient(gSession,header)
        return nil
    end
    local func = service[funcName]
    local ok,ret1,ret2,ret3,ret4 = func(gSession, ...)
    return ok,ret1,ret2,ret3,ret4
end

--打包发给客户端的数据
function this.pack(header, data)
    local buffer
    buffer = protoUtil.
    encodeData(header, data)
    return buffer
end

function this.unPack(gSession, buffer)
    local header, req =  protoUtil.decodeRequest(buffer)
    return gSession,header,req
end

---分发客户端数据到本服务器处理所有消息
function this.DistributionLocalMsg(gSession, header, data)
    local serviceBase = this.ServiceBase
    if not serviceBase then
        header.errorcode = errorcode.SystemError.serviceNotImpl
        nodeMgr.sendMsgToClient(gSession, header)
        return header.errorcode
    end

    if header.errorcode ~= nil and header.errorcode ~= errorcode.SystemError.success then
        nodeMgr.sendMsgToClient(gSession,header)
        return header.errorcode
    end

    local protoInfo = protoMap.protos[header.cmd]
    if not protoInfo then
        header.errorcode = errorcode.SystemError.protoNotExists
        nodeMgr.sendMsgToClient(gSession,header)
        return header.errorcode
    end

    local service = serviceBase.modules[protoInfo.module] ---取得协议对应的模块脚本

    if not service or not service[protoInfo.name] then
        header.errorcode = errorcode.SystemError.moduleNotImpl
        logger.Errorf("the module[%s] object is not found in this service", protoInfo.module)
        nodeMgr.sendMsgToClient(gSession,header)
        return header.errorcode
    end
    local func = service[protoInfo.name]
    local ec,bytes = func(gSession, data)

    if ec ~= errorcode.SystemError.success then
        if ec == nil then
            logger.Errorf("proto[%s] not return error code", protoInfo.id)
            ec = errorcode.SystemError.unknow
        end
    else
        if bytes == nil and protoInfo.response ~= nil then
            logger.Errorf("proto[%s] must has return value error[%s]", protoInfo.fullname, errorcode[ec].msg)
        end
    end
    header.errorcode = ec
    nodeMgr.sendMsgToClient(gSession,header,bytes)
    return ec,bytes
end

---处理网关服务收到消息后的处理
---@param gSession Gamesession
function this.DistributionGateMsg(gSession,header, bin)
    if not header.cmd then
        logger.Errorf("收到一个没有包头的消息，这个可能是个特殊的关闭包忽略他")
        --header.errorcode = errorcode.protoNotExists
        --nodeMgr.sendMsgToClient(gSession,header)
        return
    end
    local proto = protoMap.protos[header.cmd]
    if proto == nil then
        logger.Errorf("invalid proto id[%d]", header.cmd)
        header.errorcode = errorcode.protoNotExists
        nodeMgr.sendMsgToClient(gSession,header)
        return
    end
    if proto.needAuth and not gSession.isLoginSucc then
        header.errorcode = errorcode.SystemError.noLogin
        nodeMgr.sendMsgToClient(gSession,header)
    end

    local serverNode = gSession.cacheServersNodeNames[proto.server]
    local service = proto.service
    if service and gSession.cacheServiceAddr[serverNode] and gSession.cacheServiceAddr[serverNode][service] then
        service = gSession.cacheServiceAddr[serverNode][service];
    end

    if not serverNode then
        header.errorcode = errorcode.SystemError.noUseableService
        nodeMgr.sendMsgToClient(gSession,header)
        return
    end
    if service then
        if proto.id == protoMap.Gate.heartbeat.id then
            header.errorcode = errorcode.SystemError.success
            nodeMgr.sendMsgToClient(gSession,header)
        else
            local ok = nodeMgr.call(serverNode, service, "redirect", gSession, bin)
            if not ok then
                logger.Error("转发服务失败：协议id" .. proto.id)
                header.errorcode = errorcode.SystemError.serviceIsStoped
                nodeMgr.sendMsgToClient(gSession,header)
            end
        end
    else
        logger.Error("协议没定义服务：协议id" .. proto.id)
        header.errorcode = errorcode.SystemError.noUseableService
        nodeMgr.sendMsgToClient(gSession,header)
    end
end

return this