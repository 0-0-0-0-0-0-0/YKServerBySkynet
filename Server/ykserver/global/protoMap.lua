---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/15 0:24
---

---@class protoInfo
---@field id number
---@field request string
---@field response string
---@field server string
---@field module string
---@field service string
---@field name string
---@field desc string
---@field needAuth boolean

local serviceNames  =   require("serviceNames")
local serverType    =   require("serverType")
local protoFiles    =   {
    "packbase",
}
local this =
{
    ---@type protoInfo[]
    protos      = {},
    protoFiles  = protoFiles,
}

local mt = {}
mt.__newindex = function(t, k, v)
    for key, proto in pairs(v) do
        if key ~= "module" and key ~= "service" and key ~= "server" then

            assert(t.protos[proto.id] == nil, string.format("had the same proto id[%d]", proto.id))
            assert(v.module, string.format("proto id[%x] module is nil", proto.id))
            t.protos[proto.id] = {
                id       = proto.id,                    --协议id
                request  = proto.request,               --请求包名
                response = proto.response,              --返回包名
                server   = v.server,                    --服务器类型
                module   = v.module,                    --模块
                service  = proto.service or v.service,  --服务名(服务器内部)
                name     = key,                         --协议名
                desc     = proto.desc or key,           --协议描述
            }
            rawset(t,k,v)
        end
    end
end


local gateProtol    =
{
    module     =   "gate",
    service     =   serviceNames.wsgate,
    server      =   serverType.GATE,
    heartbeat   =   {
                        id          =   1,
                        request     =   nil,
                        response    =   nil,
                        log         =   2,
                        desc        =   "请求心跳",
                        needAuth    =   false
                    }
}
setmetatable(this, mt)
this.Gate = gateProtol


local testProtol =
{
    module     =   "test",
    service     =   serviceNames.test,
    server      =   serverType.GATE,
    test   =   {
        id          =   100,
        request     =   "test",
        response    =   "test",
        log         =   2,
        desc        =   "测试消息",
        needAuth    =   false
    }
}

this.Test = testProtol

local auth =
{
    module          =   "auth",
    service         =   serviceNames.auth,
    server          =   serverType.GATE,
    login           =
    {
        id          =   200,
        request     =   "loginReq",
        response    =   "loginResp",
        log         =   2,
        desc        =   "请求登陆",
        needAuth    =   false

    },
    tickOutPlayer   =
    {
        id          =   201,
        request     =   nil,
        response    =   "tickOutEvent",
        log         =   2,
        desc        =   "账号被挤",
        needAuth    =   false
    }

}
this.auth = auth
return this