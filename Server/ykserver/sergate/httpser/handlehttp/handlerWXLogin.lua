---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/23 1:02
---
--
local appid = "wx557f39afcfcb06d6"
local appKey = "a073f4ec55b909d7e8a10ae32753168a"
local requestUrl = "https://api.weixin.qq.com/sns/jscode2session?appid=%s&secret=%s&js_code=%s&grant_type=authorization_code"

local skynet = require "skynet"
local errorCode = require("errorCode")
local crypt = require("skynet.crypt")
local dataUtil = require("datamgr.dataSerUtil")
local serviceNames = require("serviceNames")
local utils = require("utils")
local urllib = require "http.url"
local json = require("json")
local aeslua = require "aeslua"

local this = {}

function this.loginByCode(query,body,header)
    local ec,retData = errorCode.SystemError.unknow,nil
    local code = query.code
    if code then
        local url = string.format(requestUrl,appid,appKey,code)
        local ec,t,m = skynet.call(serviceNames.HTTPCLI, "lua", "request", url)
        if ec and m.response_code == 200 then
            local backT = json.decode(t)
            local openid = backT.openid
            local session_key = backT.session_key
            ---@type WXData data
            local ok,data = dataUtil.call(serviceNames.dbModeName.auth,"getWxData",openid)
            if ok and data then
                dataUtil.call(serviceNames.dbModeName.auth,"updateWxData",openid,session_key)
                return errorCode.SystemError.success,data.userid
            else
                local ret,ret2,data = dataUtil.call(serviceNames.dbModeName.auth,"CreateWechatInfo",openid,session_key,openid)
                if ret and ret2 then
                    return errorCode.SystemError.success,data.userid
                end
            end
        end
    end
    return ec,retData
end

function this.postUserInfo(query,body)
    local ec,retData = errorCode.SystemError.unknow,nil
    local postInfo = urllib.parse_query(body)
    print("postInfo   ............. ",postInfo)
    local roleId = postInfo.roleId
    local _, userInfo = dataUtil.call(serviceNames.dbModeName.auth, "getUserData", roleId) ---@type userData
    if userInfo then
        local ok,data = dataUtil.call(serviceNames.dbModeName.auth,"getWxData",userInfo.openid) ---@type WXData
        if ok and data then
            local signature2 =utils.bufferTostring( crypt.sha1(postInfo.rawData .. data.sessionkey))
            local decryptData = aeslua.decrypt(postInfo.encryptedData,data.sessionkey,postInfo.iv)
            signature2 = string.lower(signature2)
            if signature2 == postInfo.signature and this.checkWaterMark(decryptData) then -- «©√˚—È÷§
                print("------",utils.tableToString(decryptData))
                local wechatInfo = decryptData
                local ok,_data = dataUtil.call(serviceNames.dbModeName.auth,"SetUserBasicInfo",wechatInfo,roleId) ---@type WXData
                if ok then
                    ec = errorCode.SystemError.success
                    local ok,key = dataUtil.call(serviceNames.dbModeName.auth,"BuildToken",roleId)
                    local _ok,plaintext = dataUtil.call(serviceNames.dbModeName.auth,"BuildWeChatToken",roleId,data.sessionkey)
                    retData =
                    {
                        token = key,
                        plaintext = plaintext,
                        userid = roleId
                    }
                else
                    ec = errorCode.SystemError.unknow
                end
            else
                ec = errorCode.SystemError.signErr

            end
        end
    end
    return ec,retData
end

function this.checkWaterMark(decryptData)
    if decryptData.watermark then
        if decryptData.watermark and decryptData.watermark.appid then
            return decryptData.watermark.appid == appid
        end
    end
    return false
end

function this.loginByToken(query)
    local ec,retData = errorCode.SystemError.unknow,nil
    local plaintext = query.plaintext
    local roleId = query.roleId
    local _, userInfo = dataUtil.call(serviceNames.dbModeName.auth, "getUserData", roleId) ---@type userData
    if userInfo then
        local ok,data = dataUtil.call(serviceNames.dbModeName.auth,"getWxData",userInfo.openid) ---@type WXData
        if ok and data then
            local checkTokenFlag = this.CheckToken(roleId,plaintext,data.sessionkey)
            if checkTokenFlag then
                ec = errorCode.SystemError.success
                local _,key = dataUtil.call(serviceNames.dbModeName.auth,"BuildToken",roleId)
                retData =
                {
                    token = key,
                    userid = roleId
                }
            end
        end
    end
    return ec,retData
end


function this.CheckToken(roleid,plaintext,sessionKey)
    local ok,flag = dataUtil.call(serviceNames.dbModeName.auth,"checkWeChatToken",roleid,plaintext,sessionKey)
    return ok and flag
end

return this