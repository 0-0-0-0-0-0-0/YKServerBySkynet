---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/16 18:44
---


require "skynet.manager"
local skynet = require "skynet"
local serviceNames = require("serviceNames")
local service     = require "service_base"
local mysql = require("skynet.db.mysql")
local changeDataFlag = require("data.changeDataFlag")
local logger = require("logger")
local cjson = require("cjson")
local backupToMysqlTime = tonumber(skynet.getenv("backupToMysqlTime"))
local datamode = require("data.dataMode")
local sqlHelp = require("sqlHelp")
local command  = service.command
local needChangeData = {}
local cfg = require("config.cfg")

local db
---@param data ChangeDataInfo
function command.addModify(data)
    data.data = cjson.decode(data.data)
    table.insert(needChangeData, 1,data)
end



---@param data ChangeDataInfo
local function OnChanges(data)
    if data.flag == changeDataFlag.Del then
        command.delRow(data.personalId,data.keyName,data.keyValue)
    else
        command.updateRow(data.personalId,data.data,data.keyName,data.keyValue)
    end
end

local function onUpdate ()
    while true do
        skynet.sleep(100*backupToMysqlTime)
        if #needChangeData > 0 then
            local data = needChangeData[1]
            table.remove(needChangeData)
            OnChanges(data)
        end
    end
end

--插入数据
function command.addRow(tablename, row)
    local columns
    local values
    for k, v in pairs(row) do
        if not columns then
            columns = k
        else
            columns = columns..","..k
        end
        if not values then
            values = "'"..v.."'"
        else
            values = values..",".."'"..v.."'"
        end
    end
    local sql = string.format("insert into %s(%s) values(%s);", tablename, columns, values)
    local result = db:query(sql)
    if result.errno then
        logger.Errorf("insert fatal err, sql:%s err=%s", sql, result.err)
        --error(result.err)
        --return
    end
    return result
end

--删除数据
function command.delRow(tablename, keyname, value)
    local sql = string.format("delete from %s where %s = '%s';",tablename, keyname, tostring(value))
    local result = db:query(sql)
    if result.errno then
        logger.Errorf("delRow fatal err, sql:%s", sql)
        error(result.err)
        --return
    end
    return result
end

--更新数据
function command.updateRow(tablename, row, keyname, value)
    local body = {}
    for k, v in pairs(row) do
        table.insert(body, string.format("%s='%s'",k, v))
    end
    local setvalues = table.concat(body, ",")
    local sql = string.format("update %s set %s where %s ='%s';", tablename, setvalues, keyname, value)
    local result = db:query(sql)

    if result.errno then
        logger.Errorf("updateRow fatal err, sql:%s", sql)
        error(result.err)
    else
        if result.affected_rows == 0 then
            command.addRow(tablename,row)
        end
    end
    return result
end

function command.getRow(tablename,keyName,keyValue)
    local sql = sqlHelp.getRow(tablename,keyName,keyValue)--sqlHelp.getTables("userdata")
    local result = db:query(sql)
    if not result.errno then
        return result
    else
        return nil
    end
end

function command.gatTable(tablename)
    local sql = sqlHelp.getTables(tablename)
    local result = db:query(sql)
    if not result.errno then
        return result
    else
        return nil
    end
end

---@param needChangeDatas ChangeDataInfo[]
function command.initDB(needChangeDatas)
    datamode.initMysql(db)
    for i, v in pairs(needChangeDatas) do
        local data = cjson.decode(v.data)
        command.updateRow(v.personalId, data, v.keyName, v.keyValue)
    end
end

function service.onStart()
    db = mysql.connect(cfg.mysqlCfg)

    skynet.register(serviceNames.mySqlDB)
    skynet.fork(onUpdate)
end

service.start()
