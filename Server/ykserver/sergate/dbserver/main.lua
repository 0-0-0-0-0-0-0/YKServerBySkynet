---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/16 14:25
---
require "skynet.manager"
local logger  = require "logger"
local dataMode = require("data.dataMode")
local cjson = require("cjson")
local skynet      = require "skynet"
local service     = require ("service_base")
local serviceNames = require("serviceNames")
local redis = require "skynet.db.redis"
local changeDataFlag = require("data.changeDataFlag")
local dataSerUtil = require("datamgr.dataSerUtil")
local cfg = require("config.cfg")

local redisDB

local command  = service.command

function service.onStart()
    redisDB = redis.connect(cfg.redisCfg)
    skynet.register(serviceNames.dbserver)
    skynet.uniqueservice("mysql_db")
    local needUpdata = dataMode.initRedis(redisDB)
    skynet.call(serviceNames.mySqlDB,"lua","initDB",needUpdata)
end

function command.FindKey(personalId,key)
    return redisDB:hget(personalId,key)
end

function command.Find(personalId,match)
    assert(match,string.format("查询redis出错 personalId=%s",personalId))
    local values = redisDB:hvals(personalId)
    if values then
        for i, v in pairs(values) do
            local data = v--redisDB:get(v)
            if data then
                data = skynet.unpack(data)
                if match and match(data) then
                    return data
                end
            end
        end
    end
    return nil
end

function command.FinAll(personalId,match)
    local list = {}
    local keys = redisDB:hvals(personalId)
    if keys then
        for i, v in pairs(keys) do
            local data = v
            if data then
                data = skynet.unpack(data)
                if match then
                    if match(data) then
                        table.insert(list,data)
                    end
                else
                    table.insert(list,data)
                end
            end
        end
    else
        return nil
    end
    return list
end

function command.backDataToRedis(tableName)
    local flag = true
    local dataClass = dataMode.getTableClass(tableName)
    if dataClass then
        local ok,tables = dataSerUtil.callMysqlSer("gatTable",tableName)
        if ok then
            if tables and #tables > 0 then
                for i, row in pairs(tables) do
                    local data = dataClass()
                    data = data:setData(row)

                    if data then
                        local changeDataInfo = data:ToSaveData()
                        redisDB:hset(changeDataInfo.personalId
                        ,changeDataInfo.keyValue
                        ,changeDataInfo.data)
                        flag = true
                    else
                        flag = false
                    end
                end
            else
                flag = false
            end
        else
            flag = false
        end
        --dataSerUtil.callDataSer("gat")
    else
        flag = false
    end
    return flag
end

function command.AddOrUpdate(data)
    local flag = redisDB:hexists(data.personalId,data.keyValue) == 1
    if flag then
        data.flag = changeDataFlag.Update
    else
        data.flag = changeDataFlag.Add
    end

    redisDB:hset(data.personalId,data.keyValue,data.data)
    if data.needSavetoDB then
        skynet.call(serviceNames.mySqlDB,"lua","addModify",data)
    end
    return true
end

---@param data ChangeDataInfo
function command.Add(data)
    local flag = redisDB:hexists(data.personalId,data.keyValue) == 1
    if flag then
        return false
    end
    data.flag = changeDataFlag.Add
    redisDB:hset(data.personalId,data.keyValue,data.data)
    if data.needSavetoDB then
        skynet.call(serviceNames.mySqlDB,"lua","addModify",data)
    end
    return true
end

function command.Del(data)
    if redisDB:hexists(data.personalId,data.keyValue) == 1 then
        redisDB:hdel(data.personalId,data.keyValue,data.data)
        if data.needSavetoDB then
            skynet.call(serviceNames.mySqlDB,"lua","addModify",data)
        end
        return true
    end
    return false
end

function command.Execute(cmd,...)
    return redisDB[cmd](redisDB,...)
end

function command.SetExpire(keys,values,timeout)
    for i, key in pairs(keys) do
        local value = values[i]
        redisDB:set(key,value)
        redisDB:expire(key,timeout)
    end
end



function command.dataChange(modelName,funcName,...)
    local mode = dataMode.modes[modelName]
    if mode then
        local func = mode[funcName]
        if func then
            return func(redisDB,...)
        else
            logger.Errorf("db func[%s] is not found", funcName)
        end
    else
        logger.Errorf("db module[%s] is not found", modelName)
    end
end

service.start()