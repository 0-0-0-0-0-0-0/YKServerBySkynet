---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/8/23 0:09
---
local utils = require("utils")
local dataUtil = require("datamgr.dataSerUtil")
local accountData = require("data.accountData")
local userData = require("data.userData")
local md5 = require("md5")
local tokenkey = "__accountTokenTable"
local this = {}
function this.GetAccountInfo(db,accountId)
    if not accountId then
        return nil
    end
    local accountInfo = db:hget(accountData.personalId,accountId)
    if accountInfo then
        local  data = accountData()
        data:setData(accountInfo)
        return data
    else
        return nil
    end
end

function this.CreateAccount(db,accountId,pwd)
    local accountInfo
    local ret = false
    if accountId and pwd then
        accountInfo = db:hget(accountData.personalId,accountId)
        if accountInfo then
            ret = false
        else
            local userInfo = this.CreateUser(db,accountId)
            if not userInfo then
                ret = false
            else
                local _accountInfo = accountData(accountId,pwd,userInfo.roleId)---@type accountData
                local ok,flag = dataUtil.addDataToDB(_accountInfo)
                ret = ok and flag
                accountInfo = _accountInfo
            end
        end
    else
        ret = false
    end
    if ret then
        return accountInfo
    else
        return nil
    end
end

function this.CreateWechatInfo(db,openid,session_key,unionid)
    ---@type WXData wechatInfo
    local wechatInfo
    local ret = false
    if  openid and session_key then
        wechatInfo = db:hget(wxData.personalId,openid)
        if wechatInfo then
            ret = false
        else
            local userInfo = this.CreateUser(db,openid)
            if not userInfo then
                ret = false
            else
                --_init(openid,unionid,userid,sessionkey)
                local _info = wxData(openid,unionid,userInfo.roleId,session_key)---@type WXData
                local ok,flag = dataUtil.addDataToDB(_info)
                ret = ok and flag
                wechatInfo = _info
            end

        end
    end

    return ret,wechatInfo
end
function this.CreateUser(db,unionId)
    local userid = dataUtil.GetuniqueUserid(db)
    local userInfo = userData(userid)---@type userData
    userInfo.unionId = unionId
    userInfo.createTime = utils.GetDateTime(os.time())
    local ok,flag = dataUtil.addDataToDB(userInfo)
    if ok and flag then
        return userInfo
    end
    return nil
end

function this.SetUserBasicInfo(db,tmp,roleId,isDebug)
    local userinfo = this.getUserData(db,roleId)
    if not userinfo then
        return false
    end
    if isDebug then
        userinfo.headUrl = tmp.head_url
        userinfo.nickName = tmp.nickname
    else
        userinfo.headUrl = tmp.avatarUrl
        userinfo.sex = tmp.gender
        userinfo.county = tmp.country
        userinfo.nickName = tmp.nickName
        userinfo.city = tmp.city
    end
    userinfo.nickName =  crypt.base64encode(userinfo.nickName)
    local ok = dataUtil.upOrAddDataToDB(userinfo)
    return ok,userinfo

end


function this.setLastLoginTime(db,userId)
    local userinfo = this.getUserData(db,userId)
    if not userinfo then
        return false
    end
    userinfo.lastLoginTime = utils.GetDateTime(os.time())
    local ok = dataUtil.upOrAddDataToDB(userinfo)
    return ok
end


function this.BuildToken(db,roleId)
    local token = md5.sumhexa(string.format("%s:%s",os.time(),roleId))
    local key = string.format("%s:%d",tokenkey,roleId)
    db:set(key,token)
    db:expire(key, 60)
    return token
end

function this.checkToken(db,roleId,token)
    local key = string.format("%s:%s",tokenkey,roleId)
    local _token = db:get(key)
    if _token ~= nil and _token == token then
        return true
    end
    return false
end

function this.BuildWeChatToken(db,roleId,sessionkey)
    local plainText = md5.sumhexa(string.format("%s:%s",os.time(),roleId))
    local Secretaries = md5.sumhexa(string.format("%s:%s",plainText,sessionkey))
    local key = string.format("%s:%d",wechatTokenkey,roleId)
    db:set(key,Secretaries)
    db:expire(key,29 * 24 * 60)
    return plainText
end
function this.checkWeChatToken(db,roleId,plainText,sessionkey)
    local key = string.format("%s:%s",wechatTokenkey,roleId)
    local Secretaries = db:get(key)
    if Secretaries ~= nil  then
        local Secretaries2 = md5.sumhexa(string.format("%s:%s",plainText,sessionkey))
        if Secretaries2 == Secretaries then
            return true
        end
    end
    return false
end

function this.getUserData(db,userid)
    local userInfo = db:hget(userData.personalId,userid)

    if userInfo then
        local data = userData()
        data:setData(userInfo)
        return data
    end
    return nil
end

function this.getDrunknessValue(db,roleId,addValue,update)
    local userinfo = this.getUserData(db,roleId)
    addValue = addValue or 0
    local curTime = os.time()
    local timeSpace = curTime - userinfo.drunkennessTime
    if timeSpace > 24 * 60 * 60 then
        userinfo.drunkenness = 0
    else
        local hourdel = math.floor( timeSpace * 100 /(60 * 60 * 3))
        local minutedel = math.floor( timeSpace  /(60*5))
        userinfo.drunkenness = userinfo.drunkenness - (hourdel + minutedel)
        if userinfo.drunkenness <= 0 then
            userinfo.drunkenness = 0
        end
    end
    if userinfo.drunkenness >= 100 or addValue >= 0 then
        userinfo.drunkenness = userinfo.drunkenness + addValue
    end
    userinfo.drunkennessTime = curTime

    if update then
        local ok = dataUtil.upOrAddDataToDB(userinfo)
    end
    return userinfo
end

function this.updateUserBaseInfo(db,changeT,userId)
    local userinfo = this.getDrunknessValue(db,userId,changeT.drunkness)
    if not userinfo then
        return nil
    end
    userinfo.exp = userinfo.exp + changeT.exp
    userinfo.coin = userinfo.coin + changeT.coin
    local lvUpExp = (userinfo.lv + 1 ) * 100
    local lvUp
    if userinfo.exp >= lvUpExp then
        userinfo.exp = userinfo.exp - lvUpExp
        userinfo.lv = userinfo.lv + 1
        lvUp = true
    end
    local ok = dataUtil.upOrAddDataToDB(userinfo)

    return userinfo,lvUp
end


---------------------- Î¢ÐÅµÇÂ¼
---@return WXData
function this.getWxData(db,openid)
    local wechatInfo = db:hget(wxData.personalId,openid)
    if wechatInfo then
        local  data = wxData()
        data:setData(wechatInfo)
        return data
    end
    return nil
end


function this.updateWxData(db,openid,session_key)
    ---@type WXData wechatInfo
    local wechatInfo = this.getWxData(db,openid)  --db:hget(wxData.personalId,openid)
    if wechatInfo then
        wechatInfo.sessionkey =session_key
        local ok = dataUtil.upOrAddDataToDB(wechatInfo)
        return true
    end
    return nil
end


return this