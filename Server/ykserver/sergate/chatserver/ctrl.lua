---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Administrator.
--- DateTime: 2018/9/14 0014 21:03
---
local skynet = require("skynet")
local errorCode = require("errorCode")
local dataSerUtil = require("datamgr.dataSerUtil")
local serviceNames = require("serviceNames")
local nodeMgr = require("nodeMgr")
local protoMap = require("protoMap")


local this = {}

local ChatType = {
    Hall = 1,
    Friend = 2,
    Room = 3,
}

local messages
local chatUsers
function this.init()
    messages = {}
    chatUsers = {}
    skynet.fork(this.broadcast)
end

---@param gamesession Gamesession
function this.login(gamesession)
    local roleId = gamesession.roleId
    if not roleId then
        return errorCode.SystemError.noLogin
    end
    local _, userInfo = dataSerUtil.call(serviceNames.dbModeName.auth, "getUserData", roleId) ---@type userData
    if not userInfo then
        return errorCode.SystemError.noLogin
    end
    ---@type NetPack.chatMsg
    chatUsers[roleId] = {
        roleId = roleId,
        session = gamesession,
        nickName = userInfo.nickName,
        sex = userInfo.sex
    }
    return errorCode.SystemError.success

end
---@param data NetPack.chatMsg
function this.chat(gamesession, data)
    local roleId = gamesession.roleId
    if not roleId then
        return errorCode.SystemError.noLogin
    end
    if data.type == ChatType.Hall and  not chatUsers[roleId]  then
        return errorCode.SystemError.noLogin
    end
    if not data.type  then
        return errorCode.SystemError.argument
    end

    if data.type == ChatType.Hall then
        local p = chatUsers[roleId]
        ---@type NetPack.chatMsg
        local msg = {
            nickName = p.nickName,
            roleId   = p.roleId,
            sex = p.sex,
            content = data.content,
            param = data.param,
            type = data.type
        }
        table.insert(messages,msg)
    elseif data.type == ChatType.Friend then
       --local ok,ret = nodeMgr.callGameSession(gamesession, "broadcastGateMsgToServices", gamesession,"friendChat", data)
        skynet.send(serviceNames.uniqueService.friendserver,"lua","friendChat",gamesession,data)
    elseif data.type == ChatType.Room then
        local ok,ret = nodeMgr.callGameSession(gamesession, "broadcastGateMsgToServices", gamesession,"roomChat", data)
    end
    return errorCode.SystemError.success
end

function this.quit(gamesession)
    local roleId = gamesession.roleId
    if not roleId then
        return errorCode.SystemError.success
    end
    chatUsers[roleId] = nil
    return errorCode.SystemError.success
end

function this.broadcast()
    while true do
        if #messages > 0 then
            ---@type NetPack.chatMsg msg
            local msg = table.remove(messages, 1)
            this.broadcastToAll(msg)
        end
        skynet.sleep(5)  -- sleep 0.05s
    end
end
---@type NetPack.chatMsg msg
function this.broadcastToAll(msg)
    for roleId, p in pairs(chatUsers) do
        local head = { cmd = protoMap.chatserver.chatEvent.id, errcode = 0 }
        nodeMgr.pushMsgToClient(p.session, head, msg)
    end
end

function this.userOffline(gamesession)
    this.quit(gamesession)
end

return this